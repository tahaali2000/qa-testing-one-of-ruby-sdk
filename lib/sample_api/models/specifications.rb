# sample_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SampleApi
  # Specifications Model.
  class Specifications < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :weight

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :dimensions

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :material

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['weight'] = 'weight'
      @_hash['dimensions'] = 'dimensions'
      @_hash['material'] = 'material'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        weight
        dimensions
        material
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(weight = SKIP, dimensions = SKIP, material = SKIP)
      @weight = weight unless weight == SKIP
      @dimensions = dimensions unless dimensions == SKIP
      @material = material unless material == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      weight = hash.key?('weight') ? hash['weight'] : SKIP
      dimensions = hash.key?('dimensions') ? hash['dimensions'] : SKIP
      material = hash.key?('material') ? hash['material'] : SKIP

      # Create object from extracted values.
      Specifications.new(weight,
                         dimensions,
                         material)
    end

    # Validates an instance of the object from a given value.
    # @param [Specifications | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} weight: #{@weight}, dimensions: #{@dimensions}, material: #{@material}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} weight: #{@weight.inspect}, dimensions: #{@dimensions.inspect}, material:"\
      " #{@material.inspect}>"
    end
  end
end
