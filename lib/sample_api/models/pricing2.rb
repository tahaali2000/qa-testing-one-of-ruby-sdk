# sample_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SampleApi
  # Pricing2 Model.
  class Pricing2 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :tax

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :tax_rate

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['tax'] = 'tax'
      @_hash['tax_rate'] = 'taxRate'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        tax
        tax_rate
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(tax = SKIP, tax_rate = SKIP)
      @tax = tax unless tax == SKIP
      @tax_rate = tax_rate unless tax_rate == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      tax = hash.key?('tax') ? hash['tax'] : SKIP
      tax_rate = hash.key?('taxRate') ? hash['taxRate'] : SKIP

      # Create object from extracted values.
      Pricing2.new(tax,
                   tax_rate)
    end

    # Validates an instance of the object from a given value.
    # @param [Pricing2 | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} tax: #{@tax}, tax_rate: #{@tax_rate}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} tax: #{@tax.inspect}, tax_rate: #{@tax_rate.inspect}>"
    end
  end
end
