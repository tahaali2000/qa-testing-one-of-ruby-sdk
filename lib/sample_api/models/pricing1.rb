# sample_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module SampleApi
  # Pricing1 Model.
  class Pricing1 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :discount

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :valid_until

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['discount'] = 'discount'
      @_hash['valid_until'] = 'validUntil'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        discount
        valid_until
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(discount = SKIP, valid_until = SKIP)
      @discount = discount unless discount == SKIP
      @valid_until = valid_until unless valid_until == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      discount = hash.key?('discount') ? hash['discount'] : SKIP
      valid_until = if hash.key?('validUntil')
                      (DateTimeHelper.from_rfc3339(hash['validUntil']) if hash['validUntil'])
                    else
                      SKIP
                    end

      # Create object from extracted values.
      Pricing1.new(discount,
                   valid_until)
    end

    def to_custom_valid_until
      DateTimeHelper.to_rfc3339(valid_until)
    end

    # Validates an instance of the object from a given value.
    # @param [Pricing1 | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} discount: #{@discount}, valid_until: #{@valid_until}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} discount: #{@discount.inspect}, valid_until: #{@valid_until.inspect}>"
    end
  end
end
