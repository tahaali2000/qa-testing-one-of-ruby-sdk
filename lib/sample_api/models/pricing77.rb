# sample_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module SampleApi
  # Pricing77 Model.
  class Pricing77 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :price

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :currency

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :discount

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :valid_until

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :tax

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :tax_rate

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :membership_fee

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :validity_period

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :shipping_cost

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :shipping_method

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :service_charge

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :installment

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :payment_due

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['price'] = 'price'
      @_hash['currency'] = 'currency'
      @_hash['discount'] = 'discount'
      @_hash['valid_until'] = 'validUntil'
      @_hash['tax'] = 'tax'
      @_hash['tax_rate'] = 'taxRate'
      @_hash['membership_fee'] = 'membershipFee'
      @_hash['validity_period'] = 'validityPeriod'
      @_hash['shipping_cost'] = 'shippingCost'
      @_hash['shipping_method'] = 'shippingMethod'
      @_hash['service_charge'] = 'serviceCharge'
      @_hash['description'] = 'description'
      @_hash['installment'] = 'installment'
      @_hash['payment_due'] = 'paymentDue'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        price
        currency
        discount
        valid_until
        tax
        tax_rate
        membership_fee
        validity_period
        shipping_cost
        shipping_method
        service_charge
        description
        installment
        payment_due
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(price = SKIP, currency = SKIP, discount = SKIP,
                   valid_until = SKIP, tax = SKIP, tax_rate = SKIP,
                   membership_fee = SKIP, validity_period = SKIP,
                   shipping_cost = SKIP, shipping_method = SKIP,
                   service_charge = SKIP, description = SKIP,
                   installment = SKIP, payment_due = SKIP)
      @price = price unless price == SKIP
      @currency = currency unless currency == SKIP
      @discount = discount unless discount == SKIP
      @valid_until = valid_until unless valid_until == SKIP
      @tax = tax unless tax == SKIP
      @tax_rate = tax_rate unless tax_rate == SKIP
      @membership_fee = membership_fee unless membership_fee == SKIP
      @validity_period = validity_period unless validity_period == SKIP
      @shipping_cost = shipping_cost unless shipping_cost == SKIP
      @shipping_method = shipping_method unless shipping_method == SKIP
      @service_charge = service_charge unless service_charge == SKIP
      @description = description unless description == SKIP
      @installment = installment unless installment == SKIP
      @payment_due = payment_due unless payment_due == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      price = hash.key?('price') ? hash['price'] : SKIP
      currency = hash.key?('currency') ? hash['currency'] : SKIP
      discount = hash.key?('discount') ? hash['discount'] : SKIP
      valid_until = if hash.key?('validUntil')
                      (DateTimeHelper.from_rfc3339(hash['validUntil']) if hash['validUntil'])
                    else
                      SKIP
                    end
      tax = hash.key?('tax') ? hash['tax'] : SKIP
      tax_rate = hash.key?('taxRate') ? hash['taxRate'] : SKIP
      membership_fee = hash.key?('membershipFee') ? hash['membershipFee'] : SKIP
      validity_period = if hash.key?('validityPeriod')
                          (DateTimeHelper.from_rfc3339(hash['validityPeriod']) if hash['validityPeriod'])
                        else
                          SKIP
                        end
      shipping_cost = hash.key?('shippingCost') ? hash['shippingCost'] : SKIP
      shipping_method =
        hash.key?('shippingMethod') ? hash['shippingMethod'] : SKIP
      service_charge = hash.key?('serviceCharge') ? hash['serviceCharge'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP
      installment = hash.key?('installment') ? hash['installment'] : SKIP
      payment_due = if hash.key?('paymentDue')
                      (DateTimeHelper.from_rfc3339(hash['paymentDue']) if hash['paymentDue'])
                    else
                      SKIP
                    end

      # Create object from extracted values.
      Pricing77.new(price,
                    currency,
                    discount,
                    valid_until,
                    tax,
                    tax_rate,
                    membership_fee,
                    validity_period,
                    shipping_cost,
                    shipping_method,
                    service_charge,
                    description,
                    installment,
                    payment_due)
    end

    def to_custom_valid_until
      DateTimeHelper.to_rfc3339(valid_until)
    end

    def to_custom_validity_period
      DateTimeHelper.to_rfc3339(validity_period)
    end

    def to_custom_payment_due
      DateTimeHelper.to_rfc3339(payment_due)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} price: #{@price}, currency: #{@currency}, discount: #{@discount},"\
      " valid_until: #{@valid_until}, tax: #{@tax}, tax_rate: #{@tax_rate}, membership_fee:"\
      " #{@membership_fee}, validity_period: #{@validity_period}, shipping_cost:"\
      " #{@shipping_cost}, shipping_method: #{@shipping_method}, service_charge:"\
      " #{@service_charge}, description: #{@description}, installment: #{@installment},"\
      " payment_due: #{@payment_due}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} price: #{@price.inspect}, currency: #{@currency.inspect}, discount:"\
      " #{@discount.inspect}, valid_until: #{@valid_until.inspect}, tax: #{@tax.inspect},"\
      " tax_rate: #{@tax_rate.inspect}, membership_fee: #{@membership_fee.inspect},"\
      " validity_period: #{@validity_period.inspect}, shipping_cost: #{@shipping_cost.inspect},"\
      " shipping_method: #{@shipping_method.inspect}, service_charge: #{@service_charge.inspect},"\
      " description: #{@description.inspect}, installment: #{@installment.inspect}, payment_due:"\
      " #{@payment_due.inspect}>"
    end
  end
end
