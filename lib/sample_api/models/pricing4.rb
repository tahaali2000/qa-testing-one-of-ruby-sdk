# sample_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SampleApi
  # Pricing4 Model.
  class Pricing4 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :shipping_cost

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :shipping_method

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['shipping_cost'] = 'shippingCost'
      @_hash['shipping_method'] = 'shippingMethod'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        shipping_cost
        shipping_method
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(shipping_cost = SKIP, shipping_method = SKIP)
      @shipping_cost = shipping_cost unless shipping_cost == SKIP
      @shipping_method = shipping_method unless shipping_method == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      shipping_cost = hash.key?('shippingCost') ? hash['shippingCost'] : SKIP
      shipping_method =
        hash.key?('shippingMethod') ? hash['shippingMethod'] : SKIP

      # Create object from extracted values.
      Pricing4.new(shipping_cost,
                   shipping_method)
    end

    # Validates an instance of the object from a given value.
    # @param [Pricing4 | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} shipping_cost: #{@shipping_cost}, shipping_method: #{@shipping_method}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} shipping_cost: #{@shipping_cost.inspect}, shipping_method:"\
      " #{@shipping_method.inspect}>"
    end
  end
end
